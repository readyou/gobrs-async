#gobrs:
#  async:
#    config:
#      rules:
#        - name: "performance"
#          content: "taskA->taskF,taskB->taskF,taskC->taskF,taskD->taskF,taskE->taskF"
#
#        # 规则 是数组类型的 多组规则
#        - name: "general" # 猜想下面的流程 gobrs 会开启几个线程？ 注意看打印的日志哦～
#          content: "AService->BService->FService,CService,EService->GService,HService" # AService: 300ms + FService: 2000ms + GService: 100  = 2400ms
#          task-interrupt: false # 局部异常是否打断主流程 默认false
#          transaction: false
#          logConfig:
#            costLogabled: true # 开启任务耗时打印 log日志级别需要为 error 默认true
#            errLogabled: true # 开启任务异常打印 默认true
#
#        - name: "anyConditionGeneral"
#          content: "AServiceCondition,BServiceCondition,CServiceCondition->DServiceCondition"
#          logConfig:
#            costLogabled: true # 开启任务耗时打印 log日志级别需要为 error 默认true
#            errLogabled: true # 开启任务异常打印 默认true
#
#        #  AServiceCondition 、BServiceCondition、CServiceCondition任务谁返回true 谁有资格继续往下执行
#        - name: "anyConditionRule"
#          content: "AServiceCondition,BServiceCondition,CServiceCondition任务谁返回trueion->DServiceCondition:anyCondition"
#
#        - name: "anyConditionRuleAppend"
#          content: "AServiceCondition,BServiceCondition,CServiceCondition->DServiceCondition:anyCondition->EServiceCondition"
#        - name: "retryRule"
#          content: "caseRetryTaskA->caseRetryTaskB,caseRetryTaskC"
#
#        - name: "optionalRule"
#          content: "caseOptionalTaskA->caseOptionalTaskB->caseOptionalTaskC,caseOptionalTaskD->caseOptionalTaskE->caseOptionalTaskF"
#
#        ## 单一任务超时时间
#        - name: "timeoutRule"
#          content: "caseTimeoutTaskA->caseTimeoutTaskB->caseTimeoutTaskC"
#        # 官方场景一 https://async.sizegang.cn/pages/2f844b/#%E5%9C%BA%E6%99%AF%E4%B8%80
#        - name: "caseOne"
#          content: "caseOneTaskA->caseOneTaskB,caseOneTaskC,caseOneTaskD"
#
#        # 官方场景二 https://async.sizegang.cn/pages/2f844b/#%E5%9C%BA%E6%99%AF%E4%BA%8C
#        - name: "caseTwo"
#          content: "caseTwoTaskA->caseTwoTaskB->caseTwoTaskC,caseTwoTaskD"
#        # 官方场景三 https://async.sizegang.cn/pages/2f844b/#%E5%9C%BA%E6%99%AF%E4%B8%89
#        - name: "caseThree"
#          content: "caseThreeTaskA->caseThreeTaskB,caseThreeTaskC,caseFourTaskD->caseThreeTaskG;
#                    caseThreeTaskA->caseThreeTaskE,caseThreeTaskF->caseThreeTaskG;"
#        # 官方场景四 https://async.sizegang.cn/pages/2f844b/#%E5%9C%BA%E6%99%AF%E5%9B%9B
#        - name: "caseFour"
#          content: "caseFourTaskA->caseFourTaskB->caseFourTaskC,caseFourTaskD,caseFourTaskE;
#                    caseFourTaskA->caseFourTaskH->caseFourTaskI,caseFourTaskJ,caseFourTaskK;"
#          logConfig:
#            costLogabled: false # 关闭耗时任务打印
#        # 官方场景五 https://async.sizegang.cn/pages/2f844b/#%E5%9C%BA%E6%99%AF%E4%BA%94
#        - name: "caseFive"
#          content: "caseFourTaskA,caseFourTaskB,caseFourTaskC->caseFourTaskD:any:exclusive" # any 任意一个任务（A、B、C）执行完成后 则执行D任务
#          # exclusive 避免任务执行浪费 所以 D执行完成之后 会主动 中断 未完成的任务
#        # 任务异常中断 https://async.sizegang.cn/pages/2f844de/#%E5%8F%AF%E9%85%8D%E7%BD%AE%E7%9A%84%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E5%99%A8
#        - name: "taskInterrupt"
#          content: "interruptTaskA->interruptTaskB;interruptTaskC->interruptTaskD"
#          task-interrupt: true # 局部异常是否打断主流程 默认 false
#        # 获取非强依赖任务的返回结果  如下： C任务获取A任务的返回结果， 从任务配置上看 C并不需要A 执行完成后再执行C 所有 通过Future方式 C有能力获取到A的返回结果
#        - name: "futureTaskRule"
#          content: "futureTaskA->futureTaskB;futureTaskC->futureTaskD"
#          task-interrupt: true # 局部异常是否打断主流程 默认 false